<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
using System;
using System.Collections;
using System.Collections.Generic;
using Gtk;
using UI = Gtk.Builder.ObjectAttribute;
namespace <#=ProjectName#><#
   if (SubNameSpace != "")
   {
#>.<#= SubNameSpace #> <#
   }
#>
{

public class cls<#=TreeViewName#>{

    [UI] private readonly Gtk.TreeView <#=TreeViewName#> = null;
    Gtk.ListStore <#=ListStoreName#> = new Gtk.ListStore (typeof (<#=ModelName#>));

    private void _mkTreeView_<#=ModelName#>()
    {    
<#
foreach (columnModel columnModel1 in columnModelArray)
{

    if (columnModel1.effective && columnModel1.typeFix != "bool"){
#>
            Gtk.TreeViewColumn <#=columnModel1.title#>Column = new Gtk.TreeViewColumn ();
            <#=columnModel1.title#>Column.Title = "<#=columnModel1.title#>";
            Gtk.CellRendererText <#=columnModel1.title#>Cell = new Gtk.CellRendererText();
            <#=columnModel1.title#>Column.PackStart(<#=columnModel1.title#>Cell, true);
<#
    }else if (columnModel1.effective && columnModel1.typeFix == "bool"){
#>
            Gtk.TreeViewColumn <#=columnModel1.title#>Column = new Gtk.TreeViewColumn ();
            <#=columnModel1.title#>Column.Title = "<#=columnModel1.title#>";
            Gtk.CellRendererToggle <#=columnModel1.title#>Cell = new Gtk.CellRendererToggle();
            <#=columnModel1.title#>Column.PackStart(<#=columnModel1.title#>Cell, true);
            <#=columnModel1.title#>Cell.Toggled += delegate(object o, ToggledArgs args) {
                TreeIter iter;
                if ( <#=ListStoreName#>.GetIterFromString(out iter, args.Path))
                {
                    <#=ModelName#> <#=ModelName#>1 = (<#=ModelName#>) <#=ListStoreName#>.GetValue(iter, 0);
                    <#=ModelName#>1.<#=columnModel1.title#> = <#=ModelName#>1.<#=columnModel1.title#> == true ? false : true;
                }
            };
<#
    }
#>  
<#
}
#>
<#
foreach (columnModel columnModel1 in columnModelArray)
{
    if (columnModel1.effective)
    {
        #>
    <#=columnModel1.title#>Column.SetCellDataFunc (<#=columnModel1.title#>Cell, new Gtk.TreeCellDataFunc (Render<#=columnModel1.title#>));
        <#
    }
}
#>

}

        private void _mkTreeViewBinding_<#=ModelName#>()
        {    

            <#=ListStoreName#> = new Gtk.ListStore (typeof (<#=ModelName#>));

            List<<#=ModelName#>> <#=ModelName#>Array = new List<<#=ModelName#>>();

            foreach (<#=ModelName#> <#=ModelName#>1 in <#=ModelName#>Array) {
                <#=ListStoreName#>.AppendValues (<#=ModelName#>1);
            }

            <#=TreeViewName#>.Model = <#=ListStoreName#>;

        }
<#
foreach (columnModel columnModel1 in columnModelArray)
{
    if (columnModel1.effective)
    {
 #>
        private void Render<#=columnModel1.title#>(Gtk.TreeViewColumn column, Gtk.CellRenderer cell, Gtk.ITreeModel model, Gtk.TreeIter iter)
        {
            <#=ModelName#> <#=ModelName#>1 = (<#=ModelName#>) model.GetValue (iter, 0);
        <#if (columnModel1.effective && columnModel1.typeFix != "bool")
        {#>
            (cell as Gtk.CellRendererText).Text = <#=ModelName#>1.<#=columnModel1.title#>;
      <#
        }
        #>
        }
<#
        }
}
#>   
  }
}